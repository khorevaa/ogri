#Использовать tempfiles
#Использовать gitrunner
#Использовать opm

Процедура СобратьИУстановить(Знач ГитхабРепозиторий, Знач ВеткаГит, Знач ЛокальнаяУстановка)
	
	ГитХабПакет = Новый ОписаниеПакетаGithub(ГитхабРепозиторий);

	КаталогСборки = ВременныйФайлы.НовыйКаталог();
	ПолучитьИсходники(ГитХабПакет.URLКлонирования(), ВеткаГит, КаталогСборки);

	ВыходнойКаталог = ВременныйФайлы.НовыйКаталог();
	
	СобратьПакетИзИсходников(КаталогСборки, ВыходнойКаталог);

	РежимУстановки = ПолучитьРежимУстановки(ЛокальнаяУстановка);

	МассивФайлов = НайтиФайлыOSPX(ВыходнойКаталог);
	
	Для Каждого ФайлПакета Из МассивФайлов Цикл

		УстановитьOSPXПакет(ФайлПакета.ПолноеИмя, РежимУстановки);

	КонецЦикла

КонецПроцедуры

Функция ПолучитьРежимУстановки(Знач ЛокальнаяУстановка)
	
	Возврат ?(ЛокальнаяУстановка, РежимУстановкиПакетов.Локально , РежимУстановкиПакетов.Глобально);

КонецФункции

Процедура Установить(Знач ГитхабРепозиторий, Знач ПреРелиз, Знач ЛокальнаяУстановка)
	
КонецПроцедуры

Функция НайтиФайлыOSPX(Знач КаталогПоиска)
	
	Возврат НайтиФайлы(КаталогПоиска, "*.ospx");

КонецФункции

Процедура СобратьПакетИзИсходников(Знач КаталогСборки, Знач ВыходнойКаталог)
	
	мТекущийКаталог = ТекущийКаталог();

	УстановитьТекущийКаталог(КаталогСборки);

	Сборшик = Новый СборщикПакета;
	
	Попытка
	
		Сборцик.СобратьПакет(КаталогИсходников, Неопределено,  ВыходнойКаталог)
	
	Исключение
	
		УстановитьТекущийКаталог(мТекущийКаталог);
		ВызватьИсключение ОписаниеОшибки();

	КонецПопытки;
	
	УстановитьТекущийКаталог(мТекущийКаталог);

КонецПроцедуры

Функция ПолучитьФайлыРелиза()
	
КонецФункции

Процедура УстановитьDEBПакет(Знач ПутьКФайлу)
	
КонецПроцедуры

Процедура УстановитьRPMПакет(Знач ПутьКФайлу)
	
КонецПроцедуры

Процедура УстановитьEXEПакет(Знач ПутьКФайлу)
	
КонецПроцедуры

Процедура УстановитьOSPXПакет(Знач ПутьКФайлуПакета, Знач РежимУстановки)
	
	РаботаСПакетами.УстановитьПакетИзФайла(ПутьКФайлуПакета, РежимУстановки)

КонецПроцедуры

Функция URLРепозитория(Знач ГитхабРепозиторий)
	Возврат СтрШаблон("https://github.com/%1", ГитхабРепозиторий);
КонецФункции

Процедура ПолучитьИсходники(Знач  ГитхабРепозиторий, Знач Ветка, Знач Каталог)
	
	ГитРепозиторий = Новый ГитРепозиторий;
	
	ГитРепозиторий.УстановитьРабочийКаталог(Каталог);
	ГитРепозиторий.УстановитьНастройку("core.quotepath", "false", РежимУстановкиНастроекGit.Локально);
	ГитРепозиторий.УстановитьНастройку("merge.ours.driver", "true", РежимУстановкиНастроекGit.Локально);

	URL = URLРепозитория(ГитхабРепозиторий);
	ГитРепозиторий.КлонироватьРепозиторий(URL, Каталог);
	ГитРепозиторий.ПерейтиВВетку(Ветка);

КонецПроцедуры