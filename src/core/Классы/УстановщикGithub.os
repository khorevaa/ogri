#Использовать tempfiles
#Использовать gitrunner
#Использовать opm

Перем Лог;
Перем МенеджерВременныхФайлов;
Перем СистемнаяИнформация;
Перем ЭтоWindows;

Процедура СобратьИУстановить(Знач ГитхабРепозиторий, Знач ЛокальнаяУстановка) Экспорт

	ГитХабПакет = Новый ОписаниеПакетаGithub(ГитхабРепозиторий);

	КаталогСборки = МенеджерВременныхФайлов.СоздатьКаталог();
	ПолучитьИсходники(ГитХабПакет.URLКлонирования(), ГитХабПакет.Тег, КаталогСборки);

	ВыходнойКаталог = МенеджерВременныхФайлов.СоздатьКаталог(".orgi-build");

	СобратьПакетИзИсходников(КаталогСборки, ВыходнойКаталог);

	РежимУстановки = ПолучитьРежимУстановки(ЛокальнаяУстановка);

	Лог.Отладка("Ищю файлы пакета в каталоге <%1>", ВыходнойКаталог);
	МассивФайлов = НайтиФайлыOSPX(ВыходнойКаталог);

	Лог.Отладка("Найдено файлов <%1> пакета", МассивФайлов.Количество());

	Для Каждого ФайлПакета Из МассивФайлов Цикл

		УстановитьOSPXПакет(ФайлПакета.ПолноеИмя, РежимУстановки);

	КонецЦикла;

	//ВременныеФайлы.Удалить();


КонецПроцедуры


Функция ПолучитьКаталогУстановки(ГитхабРепозиторий)
	
	ГитХабПакет = Новый ОписаниеПакетаGithub(ГитхабРепозиторий);

	КаталогУстановкиПоУмолчанию = ОбъединитьПути(
		СистемнаяИнформация.ПолучитьПутьПапки(СпециальнаяПапка.ЛокальныйКаталогДанныхПриложений),
		ГитХабПакет.ИмяРепозитория
	);

	Возврат КаталогУстановкиПоУмолчанию;

КонецФункции

Функция НайтиФайлыOSPX(Знач КаталогПоиска)

	Возврат НайтиФайлы(КаталогПоиска, "*.ospx");

КонецФункции

Функция ПолучитьРежимУстановки(Знач ЛокальнаяУстановка)

	Возврат ?(ЛокальнаяУстановка, РежимУстановкиПакетов.Локально, РежимУстановкиПакетов.Глобально);

КонецФункции

Процедура Установить(Знач ГитхабРепозиторий, Знач ПреРелиз, Знач ЛокальнаяУстановка, Знач КаталогУстановки = "") Экспорт

	ЗагрузчикРелиза = Новый ЗагрузчикGithub;

	ОписаниеРелиза = ЗагрузчикРелиза.ПолучитьОписаниеРелиза(ГитхабРепозиторий, ПреРелиз);

	РежимУстановки = ПолучитьРежимУстановки(ЛокальнаяУстановка);

	ВерсияРелиза = ОписаниеРелиза.ВерсияРелиза;

	Вложения = ОписаниеРелиза.Вложения;

	ФайлыУстановки = УпорядочитьВложения(Вложения);

	Если ПустаяСтрока(КаталогУстановки) Тогда
		КаталогУстановки = ПолучитьКаталогУстановки(ГитхабРепозиторий);
	КонецЕсли;
	
	ФайлКаталогУстановки = Новый Файл(КаталогУстановки);

	Если НЕ ФайлКаталогУстановки.Существует() Тогда
		СоздатьКаталог(КаталогУстановки);
	КонецЕсли;

	ПакетУстановлен = Ложь;

	Для Каждого ОписаниеФайла Из ФайлыУстановки Цикл

		Попытка
			ФайлПакета = ЗагрузчикРелиза.ПолучитьФайл(ОписаниеФайла.URLЗагрузки, ОписаниеФайла.ИмяФайла);
		Исключение
			Продолжить;
		КонецПопытки;

		Если ЭтоDEBПакет(ОписаниеФайла.ИмяФайла) Тогда

			ПакетУстановлен = УстановитьDEBПакет(ФайлПакета);

			Прервать;

		ИначеЕсли ЭтоRPMПакет(ОписаниеФайла.ИмяФайла) Тогда

			ПакетУстановлен = УстановитьRPMПакет(ФайлПакета);

			Прервать;

		ИначеЕсли ЭтоOSPXПакет(ОписаниеФайла.ИмяФайла) Тогда

			ПакетУстановлен = УстановитьOSPXПакет(ФайлПакета, РежимУстановки);

			Прервать;

		ИначеЕсли ЭтоEXEПакет(ОписаниеФайла.ИмяФайла) Тогда

			ПакетУстановлен = УстановитьEXEПакет(ФайлПакета, КаталогУстановки);

		ИначеЕсли ЭтоDLLПакет(ОписаниеФайла.ИмяФайла) Тогда

			ПакетУстановлен = УстановитьDLLПакет(ФайлПакета, КаталогУстановки);

		КонецЕсли;

	КонецЦикла;

	Если Не ПакетУстановлен Тогда
		ВызватьИсключение "Не удалось установить пакет";
	КонецЕсли;

КонецПроцедуры

Функция ЭтоDEBПакет(Знач ИмяФайла)
	Возврат СтрЗаканчиваетсяНа(НРег(ИмяФайла), ".deb");
КонецФункции

Функция ЭтоRPMПакет(Знач ИмяФайла)
	Возврат СтрЗаканчиваетсяНа(НРег(ИмяФайла), ".rpm");
КонецФункции

Функция ЭтоOSPXПакет(Знач ИмяФайла)
	Возврат СтрЗаканчиваетсяНа(НРег(ИмяФайла), ".ospx");
КонецФункции

Функция ЭтоEXEПакет(Знач ИмяФайла)
	Возврат СтрЗаканчиваетсяНа(НРег(ИмяФайла), ".exe");
КонецФункции

Функция ЭтоDLLПакет(Знач ИмяФайла)
	Возврат СтрЗаканчиваетсяНа(НРег(ИмяФайла), ".dll");
КонецФункции

Функция УпорядочитьВложения(Вложения)

	Информация = ИнформацияОТекущейСистеме();

	Если НРег(Информация.ОС) = "linux" Тогда

		возврат УпорядочитьДляLinux(Вложения);

	ИначеЕсли НРег(Информация.ОС) = "windows" Тогда

		возврат УпорядочитьДляWindows(Вложения);

	Иначе

		возврат УпорядочитьДляOther(Вложения);

	КонецЕсли;

КонецФункции

Функция УпорядочитьДляWindows(Вложения)

	УпорядоченныйМассив = Новый Массив;

	Для каждого Вложение Из Вложения Цикл
		Если НЕ ВложениеПодходитьДляТекущейОС(Вложение) Тогда
			Продолжить;
		КонецЕсли;

		УпорядоченныйМассив.Добавить(Вложение);

	КонецЦикла;

	Возврат УпорядоченныйМассив;

КонецФункции

Функция УпорядочитьДляLinux(Вложения)

	УпорядоченныйМассив = Новый Массив;

	Для каждого Вложение Из Вложения Цикл
		Если НЕ ВложениеПодходитьДляТекущейОС(Вложение) Тогда
			Продолжить;
		КонецЕсли;

		УпорядоченныйМассив.Добавить(Вложение);

	КонецЦикла;

	Возврат УпорядоченныйМассив;

КонецФункции

Функция УпорядочитьДляOther(Вложения)

	УпорядоченныйМассив = Новый Массив;

	Для каждого Вложение Из Вложения Цикл
		Если НЕ ВложениеПодходитьДляТекущейОС(Вложение) Тогда
			Продолжить;
		КонецЕсли;

		УпорядоченныйМассив.Добавить(Вложение);

	КонецЦикла;

	Возврат УпорядоченныйМассив;

КонецФункции

Функция ВложениеПодходитьДляТекущейОС(Вложение)

	Возврат Истина; // TODO: Реализовать логику проверки

КонецФункции

Функция ИнформацияОТекущейСистеме()

	СИ = Новый СистемнаяИнформация;
	Инфо = Новый Структура;
	Инфо.Вставить("ОС", СИ.ВерсияОС);
	Инфо.Вставить("Архитектура", ?(СИ.Это64БитнаяОперационнаяСистема, "amd64", "386"));

	Возврат Инфо;

КонецФункции


Процедура СобратьПакетИзИсходников(Знач КаталогСборки, Знач ВыходнойКаталог)

	мТекущийКаталог = ТекущийКаталог();

	УстановитьТекущийКаталог(КаталогСборки);

	Сборщик = Новый СборщикПакета;

	Попытка

		Сборщик.СобратьПакет(КаталогСборки, Неопределено,  ВыходнойКаталог)

	Исключение

		УстановитьТекущийКаталог(мТекущийКаталог);
		ВызватьИсключение ОписаниеОшибки();

	КонецПопытки;

	УстановитьТекущийКаталог(мТекущийКаталог);

КонецПроцедуры

Функция УстановитьDEBПакет(Знач ПутьКФайлу)

	Возврат Ложь;

КонецФункции

Функция УстановитьRPMПакет(Знач ПутьКФайлу)

	Возврат Ложь;

КонецФункции

Функция УстановитьEXEПакет(Знач ПутьКФайлу, Знач КаталогУстановки)
	
	Лог.Отладка("Установка файла <%1>", ПутьКФайлу);

	ИсходныйФайл = Новый Файл(ПутьКФайлу);

	УстановленныйФайл = ОбъединитьПути(КаталогУстановки, ИсходныйФайл.Имя);

	КопироватьФайл(ПутьКФайлу, УстановленныйФайл);

	ДобавитьSHСкриптыПриНеобходимости(УстановленныйФайл);

	Возврат Истина;

КонецФункции

Функция УстановитьDLLПакет(Знач ПутьКФайлу, Знач КаталогУстановки)
	
	СкачанныйФайл = Новый Файл(ПутьКФайлу);

	УстановленныйФайл = ОбъединитьПути(КаталогУстановки, СкачанныйФайл.Имя);

	КопироватьФайл(СкачанныйФайл.ПолноеИмя, УстановленныйФайл);

	Возврат Истина;

КонецФункции

Процедура ДобавитьSHСкриптыПриНеобходимости(Знач ПутьКФайлу)
	
	Если ЭтоWindows Тогда
		Возврат;
	КонецЕсли;

	ИсполняемыйФайл = Новый Файл(ПутьКФайлу);

	ИмяПриложения = ИсполняемыйФайл.ИмяБезРасширения;

	ПутьККаталогуBin = ОбъединитьПути(
		СистемнаяИнформация.ПолучитьПутьПапки(СпециальнаяПапка.ПрофильПользователя),
		".local",
		"bin"
	);

	ПутьКСкрипту = ОбъединитьПути(ПутьККаталогуBin, ИмяПриложения);
	
	ПутьКаталогуHOME = ПолучитьПеременнуюСреды("HOME");
	Если НЕ ПустаяСтрока(ПутьКаталогуHOME) Тогда
		ПутьКИсполняемомуФайлу = СтрЗаменить(ИсполняемыйФайл.ПолноеИмя, ПутьКаталогуHOME, "$HOME");
	КонецЕсли;
	
	ТекстСкрипта = 
	"#!/bin/sh
	|mono ""%1"" ""$@""
	|";
	
	ДобавитьShСкрипт(ПутьКСкрипту, СтрШаблон(ТекстСкрипта, ПутьКИсполняемомуФайлу));

КонецПроцедуры

Процедура ДобавитьShСкрипт(Знач ПутьКСкрипту, Знач ТекстСкрипта)
	
	Лог.Информация("Создание sh-скрипта %1...", Новый Файл(ПутьКСкрипту).ИмяБезРасширения);

	Лог.Отладка("Путь с sh-скрипту: %1", ПутьКСкрипту);
	
	Лог.Отладка(
		"Текст скрипта: 
		|%1",
		ТекстСкрипта
	);
	
	Если ФС.ФайлСуществует(ПутьКСкрипту) Тогда
		Лог.Отладка("sh-скрипт уже существует");
		//Возврат;
	КонецЕсли;

	ЗаписьТекста = Новый ЗаписьТекста(ПутьКСкрипту, КодировкаТекста.UTF8NoBOM, , , Символы.ПС);
	
	ЗаписьТекста.Записать(ТекстСкрипта);
	ЗаписьТекста.Закрыть();
	
	Лог.Отладка("Установка флага выполнения...");

	Команда = Новый Команда;
	Команда.УстановитьКоманду("chmod");
	Команда.ДобавитьПараметр("+x");
	Команда.ДобавитьПараметр(ПутьКСкрипту);
	Команда.УстановитьПравильныйКодВозврата(0);
	
	Команда.Исполнить();
	Лог.Отладка(Команда.ПолучитьВывод());

КонецПроцедуры



Функция УстановитьOSPXПакет(Знач ПутьКФайлуПакета, Знач РежимУстановки)

	Успех = Ложь;

	Попытка

		РаботаСПакетами.УстановитьПакетИзФайла(ПутьКФайлуПакета, РежимУстановки);
		Успех = Истина;
	
	Исключение

		Лог.Ошибка("Ошибка установки пакета <%1>, описание ошибки <%2>", ПутьКФайлуПакета, ОписаниеОшибки());
	
	КонецПопытки;

	Возврат Успех;

КонецФункции

Процедура ПолучитьИсходники(Знач ГитхабРепозиторий, Знач Ветка, Знач Каталог)

	ГитРепозиторий = Новый ГитРепозиторий;

	ГитРепозиторий.УстановитьРабочийКаталог(Каталог);

	ГитХабПакет = Новый ОписаниеПакетаGithub(ГитхабРепозиторий);

	URL = ГитХабПакет.URLКлонирования();
	ГитРепозиторий.КлонироватьРепозиторий(URL, Каталог);
	ГитРепозиторий.ПерейтиВВетку(Ветка);

КонецПроцедуры

Лог = Логирование.ПолучитьЛог("oscript.lib.ogri");
Лог.УстановитьУровень(УровниЛога.Отладка);
СистемнаяИнформация = Новый СистемнаяИнформация;
ЭтоWindows = Найти(ВРег(СистемнаяИнформация.ВерсияОС), "WINDOWS") > 0;

МенеджерВременныхФайлов = Новый МенеджерВременныхФайлов;